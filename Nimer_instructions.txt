### Configuring Git

To get started, we want to configure a name and email for our git account.  This should be the same username and email that you use later to setup a `github` account.  In your terminal, use the following lines of code to configure the username and email, replacing *Steven Segal* with your username and the *ssegal@aol.com* with your email.

- `git config --global user.name "Steven Segal"`
- `git config --global user.email "ssegal@aol.com"`

### Setting up a Text Editor

**Vim** is default -- you have decisions to make as to whether this is right for you.  Depending on your choice of text editor, you will have to enter the appropriate code.  For a full list of text editor options see [here](https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config#ch_core_editor).

- *notepad*: `git config --global core.editor "notepad"

### Checking Configuration

To look over your basic configuration settings for git, you can use the following command:

- `git config --list`

### A New Project

<center>
<img src = https://upload.wikimedia.org/wikipedia/en/7/7f/Kraftwerk_-_The_Man-Machine.png width = 30%/><img src = https://upload.wikimedia.org/wikipedia/en/a/a6/Kraftwerk_-_Computer_World.png width = 30% />
    </center>
    
    
For this example, we will create a new directory and locate a new `git` repository inside of the directory.  We want the new directory to be located on our `fnimer` and will name it `UCB-Projects`.  Starting from our root user directory, we will navigate to the `fnimer`, create a new directory named `UCB-Projects` and move into that directory.  The following commands will accomplish this:

- cd..
- cd diretorio
- mkdir diretório criado
- cd diretório criado

git init

acessar o arquivo texto --> 
notepad nome.txt

type nome.txt (=cat)

adicionar o arquivo
git add nome.txt

git status

git commit -m "texto explicativo"

### Big Idea: Staging Area

Our workflow here will be as follows:

- Create a folder to house your work - ex.: fnimer/UCB-Projects/Amazon
- Create a new `git` repository in that folder
- When changes are made to a file, add the file to be tracked with `git add filename`
- To commit changes to your repository use `git commit -m "an informative commit message"`

documento --> git add --> staging area (DEV) --> git commit --> repository (PROD)

**Tracking Changes**

- `git status`
- `git add`
- `git commit`
- `git log`
- `git diff`

**Exploring History**

- `git diff HEAD`
- `git diff HEAD~1 manmachine.txt`
- `git show HEAD~2 manmachine.txt`
- `git checkout`
- `git diff somebiglongstring`


##### HEAD

- `git checkout master`

### Setting Up a `github.com` Account

Outside of tracking our version history locally, we will use `.git` to move files back and forth from our local computer to a remote repository on the web.  Our remote repository will be located on the website `github.com`, so first thing we need to do is setup a new account if you don't have one already.  This will have to use the same username and email as your local git configuration, so make sure to check that first. 



### Creating a New Repository on `github.com`

Once you have your account setup, you can create a new repository by clicking the **new repository** button.  Name the repository whatever you would like, and make sure **DO NOT ADD A README.md FILE**.  

<img src = images/remotecreate.png />

### Connecting with your local repository

Once you create the new repository on `github.com` you should see the following:

![](images/instructions.png)

We are interested in the commands for **push an existing repository from the command line**.  Making sure you are located in your `kraftwerk` folder on your desktop with the git repository, you can run the three commands:

```
git remote add origin https://github.com/jfkoehler/kraftwerk.git
git branch -M main
git push -u origin main
```

A typical repo will include the following items:
- README.md: This file provides a brief description of the project, its purpose, and any necessary instructions/guidance for use.
- Source code: Place all your source code files (like your jupyter notebooks) in the root directory of the repository. You can organize them further as your project grows.
- (Optional) License: Include a license file to specify the open-source license under which the project and its code is distributed. A popular choice for beginners is the MIT License, which is permissive and widely used. Read more about licensing in this [GitHub documentation](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).

